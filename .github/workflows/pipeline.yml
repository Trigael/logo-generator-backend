name: pipeline

on:
  push:
    branches:
      - "main"
      - "staging"

permissions:
  contents: read
  packages: write

jobs:
  # run-tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #     - name: Install dependencies
  #       run: npm ci --force
  #     - name: Run tests
  #       run: npm run test

  build-and-push-image:
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    # needs:
    #   - run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/trigael/ai-logo-generator:latest
            ghcr.io/trigael/ai-logo-generator:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    env: 
      SHORT_SHA: ${{ github.sha }}
      SHORT_SHA_SAFE: ${{ github.sha }}
      GIT_COMMIT_HASH: ${{ github.sha }}
      TARGET_HOST: ${{ github.ref == 'refs/heads/main' && '138.199.222.129' || github.ref == 'refs/heads/staging' && '78.47.30.210' }}
    permissions:
      packages: write
      contents: read
    needs:
      - build-and-push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Write SSH private key to file
        run: |
          mkdir -p ~/.ssh
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "${{ secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          else
            echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          fi
          chmod 600 ~/.ssh/id_ed25519

      - name: Test SSH connection
        run: ssh -o StrictHostKeyChecking=no deploy@${{ env.TARGET_HOST }} "echo âœ… SSH success"
      
      - name: Push Docker secrets to server
        uses: appleboy/ssh-action@master
        env:
          SHORT_SHA_SAFE: ${{ github.sha }}
          FRONTEND_URL_MAIN: ${{ secrets.FRONTEND_URL }}
          FRONTEND_URL_STAGING: ${{ secrets.FRONTEND_URL_STAGING }}
          BACKEND_URL_MAIN: ${{ secrets.BACKEND_URL }}
          BACKEND_URL_STAGING: ${{ secrets.BACKEND_URL_STAGING }}
          STRIPE_PUBLISHABLE_KEY_MAIN: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_PUBLISHABLE_KEY_STAGING: ${{ secrets.STRIPE_PUBLISHABLE_KEY_STAGING }}
          STRIPE_SECRET_KEY_MAIN: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_SECRET_KEY_STAGING: ${{ secrets.STRIPE_SECRET_KEY_STAGING }}
          OPENAI_API_KEY_MAIN: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_KEY_STAGING: ${{ secrets.OPENAI_API_KEY_STAGING }}
          MAILJET_API_KEY_MAIN: ${{ secrets.MAILJET_API_KEY }}
          MAILJET_API_KEY_STAGING: ${{ secrets.MAILJET_API_KEY_STAGING }}
          MAILJET_API_SECRET_MAIN: ${{ secrets.MAILJET_API_SECRET }}
          MAILJET_API_SECRET_STAGING: ${{ secrets.MAILJET_API_SECRET_STAGING }}
          MAILJET_TEMPLATE_ID_MAIN: ${{ secrets.MAILJET_TEMPLATE_ID }}
          MAILJET_TEMPLATE_ID_STAGING: ${{ secrets.MAILJET_TEMPLATE_ID_STAGING }}
          DB_TRANSACTION_URL_MAIN: ${{ secrets.DB_TRANSACTION_URL }}
          DB_TRANSACTION_URL_STAGING: ${{ secrets.DB_TRANSACTION_URL_STAGING }}
          BLACK_FOREST_API_KEY_MAIN: ${{ secrets.BLACK_FOREST_API_KEY }}
          BLACK_FOREST_API_KEY_STAGING: ${{ secrets.BLACK_FOREST_API_KEY_STAGING }}
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e

            export SHORT_SHA_SAFE=$(echo "${{ github.sha }}" | cut -c1-12)

            BRANCH_NAME=$(echo "${GITHUB_REF##*/}")
            if [ "$BRANCH_NAME" = "staging" ]; then
              SECRET_SUFFIX="_STAGING"
            else
              SECRET_SUFFIX="_MAIN"
            fi

            FRONTEND_URL_VAR="FRONTEND_URL${SECRET_SUFFIX}"
            BACKEND_URL_VAR="BACKEND_URL${SECRET_SUFFIX}"
            STRIPE_SECRET_KEY_VAR="STRIPE_SECRET_KEY${SECRET_SUFFIX}"
            STRIPE_PUBLISHABLE_KEY_VAR="STRIPE_PUBLISHABLE_KEY${SECRET_SUFFIX}"
            OPENAI_API_KEY_VAR="OPENAI_API_KEY${SECRET_SUFFIX}"
            MAILJET_API_KEY_VAR="MAILJET_API_KEY${SECRET_SUFFIX}"
            MAILJET_API_SECRET_VAR="MAILJET_API_SECRET${SECRET_SUFFIX}"
            MAILJET_TEMPLATE_ID_VAR="MAILJET_TEMPLATE_ID${SECRET_SUFFIX}"
            DB_TRANSACTION_URL_VAR="DB_TRANSACTION_URL${SECRET_SUFFIX}"
            BLACK_FOREST_API_KEY_VAR="BLACK_FOREST_API_KEY${SECRET_SUFFIX}"

            echo FRONTEND_URL_VAR

            echo -n "${{ secrets.OPENAI_API_KEY }}" | docker secret create OPENAI_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.FRONTEND_URL }}" | docker secret create FRONTEND_URL_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.BACKEND_URL }}" | docker secret create BACKEND_URL_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.REDIS_URL }}" | docker secret create REDIS_URL_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.STRIPE_PUBLISHABLE_KEY }}" | docker secret create STRIPE_PUBLISHABLE_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.STRIPE_SECRET_KEY }}" | docker secret create STRIPE_SECRET_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.MAILJET_API_KEY }}" | docker secret create MAILJET_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.MAILJET_API_SECRET }}" | docker secret create MAILJET_API_SECRET_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.MAILJET_FROM_EMAIL }}" | docker secret create MAILJET_FROM_EMAIL_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.MAILJET_TEMPLATE_ID }}" | docker secret create MAILJET_TEMPLATE_ID_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.SENTRY_DSN }}" | docker secret create SENTRY_DSN_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.LOKI_USERNAME }}" | docker secret create LOKI_USERNAME_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.LOKI_PASSWORD }}" | docker secret create LOKI_PASSWORD_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.DB_TRANSACTION_URL }}" | docker secret create DB_TRANSACTION_URL_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.HF_API_KEY }}" | docker secret create HF_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.BLACK_FOREST_API_KEY }}" | docker secret create BLACK_FOREST_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.HETZNER_SECRET_KEY }}" | docker secret create HETZNER_SECRET_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.HETZNER_ACCESS_KEY }}" | docker secret create HETZNER_ACCESS_KEY_$SHORT_SHA_SAFE -

      - name: Ensure repo is checked out for scp
        uses: actions/checkout@v4

      - name: Copy docker stack file
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: 22
          source: docker-stack.yaml
          target: /home/deploy/

      - name: Ensure Redis network and stack exist
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Creating overlay network app-net if missing..."
            if ! docker network inspect app-net >/dev/null 2>&1; then
              docker network create --driver overlay app-net
            fi

      - name: Deploy docker stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: 22
          envs: 
            GIT_COMMIT_HASH=${{ github.sha }}
            SHORT_SHA_SAFE=${{ github.sha }}
          script: |
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "TAG = $github.sha"
            
            SHORT_SHA_SAFE=$(echo $SHORT_SHA | cut -c1-12)
            export DB_URL_KEY="${{ secrets.DB_TRANSACTION_URL }}"
            export GIT_COMMIT_HASH="${{ github.sha }}"
            export SHORT_SHA_SAFE=$(echo "${{ github.sha }}" | cut -c1-12)

            docker pull ghcr.io/trigael/ai-logo-generator:$GIT_COMMIT_HASH
   
            echo "Generating stack file with GIT_COMMIT_HASH=$GIT_COMMIT_HASH"
            envsubst '${DB_URL_KEY} ${GIT_COMMIT_HASH} ${SHORT_SHA_SAFE}' < ~/docker-stack.yaml > ~/docker-stack.generated.yaml

            echo "Deploying docker stack..."
            docker stack deploy -c ~/docker-stack.generated.yaml --with-registry-auth ai-logo-generator

      - name: Delete old secrets and images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: 22
          envs: 
            GIT_COMMIT_HASH=${{ github.sha }}
            SHORT_SHA_SAFE=${{ github.sha }}
          script: |
            echo "Deleting all old Docker secrets..."
            docker secret ls -q | xargs -r docker secret rm
                      
            echo "Deleting all unused Docker image..."
            docker image prune -a -f
