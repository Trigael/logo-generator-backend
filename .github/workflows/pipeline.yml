name: pipeline

on:
  push:
    branches: ["main", "staging"]

run-name: >-
  ${{ format(
    '[{0}] {1}',
    (github.ref == 'refs/heads/main' && 'MAIN') ||
    (github.ref == 'refs/heads/staging' && 'STAGING') ||
    github.ref_name,
    (github.event.head_commit && github.event.head_commit.message) ||
    github.workflow
  ) }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/trigael/ai-logo-generator:latest
            ghcr.io/trigael/ai-logo-generator:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    env:
      GIT_COMMIT_HASH: ${{ github.sha }}
      TARGET_HOST: ${{ github.ref == 'refs/heads/main' && '78.47.30.210' || github.ref == 'refs/heads/staging' && '138.199.222.129' }}
    needs: [build-and-push-image]
    steps:
      - uses: actions/checkout@v2

      - name: Write SSH key
        run: |
          mkdir -p ~/.ssh
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "${{ secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          else
            echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          fi
          chmod 600 ~/.ssh/id_ed25519

      - name: Test SSH
        run: ssh -o StrictHostKeyChecking=no deploy@${{ env.TARGET_HOST }} "echo ✅ SSH OK"

      - name: Push Docker secrets to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            set -e
            SHORT_SHA_SAFE=$(echo "${{ github.sha }}" | cut -c1-12)

            echo -n "${{ github.ref == 'refs/heads/main' && secrets.OPENAI_API_KEY || secrets.OPENAI_API_KEY_STAGING }}" | docker secret create OPENAI_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.FRONTEND_URL || secrets.FRONTEND_URL_STAGING }}" | docker secret create FRONTEND_URL_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.BACKEND_URL || secrets.BACKEND_URL_STAGING }}" | docker secret create BACKEND_URL_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.STRIPE_PUBLISHABLE_KEY || secrets.STRIPE_PUBLISHABLE_KEY_STAGING }}" | docker secret create STRIPE_PUBLISHABLE_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.STRIPE_SECRET_KEY || secrets.STRIPE_SECRET_KEY_STAGING }}" | docker secret create STRIPE_SECRET_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.STRIPE_WEBHOOK_KEY }}" | docker secret create STRIPE_WEBHOOK_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.MAILJET_API_KEY || secrets.MAILJET_API_KEY_STAGING }}" | docker secret create MAILJET_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.MAILJET_API_SECRET || secrets.MAILJET_API_SECRET_STAGING }}" | docker secret create MAILJET_API_SECRET_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.MAILJET_FROM_EMAIL }}" | docker secret create MAILJET_FROM_EMAIL_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.MAILJET_TEMPLATE_ID || secrets.MAILJET_TEMPLATE_ID_STAGING }}" | docker secret create MAILJET_TEMPLATE_ID_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.SENTRY_DSN }}" | docker secret create SENTRY_DSN_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.LOKI_USERNAME }}" | docker secret create LOKI_USERNAME_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.LOKI_PASSWORD }}" | docker secret create LOKI_PASSWORD_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.DB_TRANSACTION_URL || secrets.DB_TRANSACTION_URL_STAGING }}" | docker secret create DB_TRANSACTION_URL_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.HF_API_KEY }}" | docker secret create HF_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ github.ref == 'refs/heads/main' && secrets.BLACK_FOREST_API_KEY || secrets.BLACK_FOREST_API_KEY_STAGING }}" | docker secret create BLACK_FOREST_API_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.HETZNER_SECRET_KEY }}" | docker secret create HETZNER_SECRET_KEY_$SHORT_SHA_SAFE -
            echo -n "${{ secrets.HETZNER_ACCESS_KEY }}" | docker secret create HETZNER_ACCESS_KEY_$SHORT_SHA_SAFE -

      - name: Copy docker stack file
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          source: docker-stack.yaml
          target: /home/deploy/

      - name: Ensure overlay network exists
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY || secrets.DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            if ! docker network inspect app-net >/dev/null 2>&1; then
              docker network create --driver overlay app-net
            fi

      # ---------- STAGING (rolling, port 4000) ----------
      - name: Deploy STAGING (rolling)
        if: github.ref == 'refs/heads/staging'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/trigael/ai-logo-generator:${{ github.sha }}

            export ENV_KEY=staging
            export GIT_COMMIT_HASH="${{ github.sha }}"
            export SHORT_SHA_SAFE=$(echo "${{ github.sha }}" | cut -c1-12)
            export DB_URL_KEY="${{ secrets.DB_TRANSACTION_URL_STAGING }}"
            export REDIS_URL_KEY="${{ secrets.REDIS_URL_STAGING }}"
            export EXPOSE_PORT=4000

            envsubst '${REDIS_URL_KEY} ${DB_URL_KEY} ${ENV_KEY} ${GIT_COMMIT_HASH} ${SHORT_SHA_SAFE} ${EXPOSE_PORT}' \
              < ~/docker-stack.yaml > ~/docker-stack.generated.yaml

            docker stack deploy -c ~/docker-stack.generated.yaml --with-registry-auth ai-logo-generator

            # Bezpečný úklid
            USED=$(docker service ls -q | xargs -r docker service inspect --format "{{range .Spec.TaskTemplate.ContainerSpec.Secrets}}{{.SecretName}}{{\"\n\"}}{{end}}" | sort -u)
            for s in $(docker secret ls --format "{{.Name}}" | grep -E "_[0-9a-f]{12}$" || true); do
              echo "$USED" | grep -qx "$s" || docker secret rm "$s" || true
            done
            docker image prune -af

      # ---------- PRODUCTION (blue-green 4001/4002) ----------
      - name: Deploy PROD (blue-green)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.TARGET_HOST }}
          username: deploy
          key: ${{ secrets.PRODUCTION_DEPLOY_SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            ACTIVE_FILE="$HOME/ACTIVE_COLOR"
            ACTIVE=$(cat "$ACTIVE_FILE" 2>/dev/null || echo blue)
            TARGET=$([ "$ACTIVE" = "blue" ] && echo "green" || echo "blue")
            BLUE_PORT=4001; GREEN_PORT=4002
            TARGET_PORT=$([ "$TARGET" = "blue" ] && echo $BLUE_PORT || echo $GREEN_PORT)

            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/trigael/ai-logo-generator:${{ github.sha }}

            export ENV_KEY=production
            export GIT_COMMIT_HASH="${{ github.sha }}"
            export SHORT_SHA_SAFE=$(echo "${{ github.sha }}" | cut -c1-12)
            export DB_URL_KEY="${{ secrets.DB_TRANSACTION_URL }}"
            export REDIS_URL_KEY="${{ secrets.REDIS_URL }}"
            export EXPOSE_PORT="$TARGET_PORT"

            envsubst '${REDIS_URL_KEY} ${DB_URL_KEY} ${ENV_KEY} ${GIT_COMMIT_HASH} ${SHORT_SHA_SAFE} ${EXPOSE_PORT}' \
              < ~/docker-stack.yaml > ~/docker-stack.generated.yaml

            docker stack deploy -c ~/docker-stack.generated.yaml --with-registry-auth "ai-logo-generator-$TARGET"

            # Počkej, až service běží
            ATTEMPTS=60
            while [ $ATTEMPTS -gt 0 ]; do
              if docker service ps "ai-logo-generator-$TARGET"_web --format '{{.CurrentState}}' | grep -q 'Running'; then
                break
              fi
              sleep 2; ATTEMPTS=$((ATTEMPTS-1))
            done
            [ $ATTEMPTS -gt 0 ] || { echo "Tasks not running"; docker service ps "ai-logo-generator-$TARGET"_web --no-trunc; exit 1; }

            # Health check na host portu
            ATTEMPTS=60
            while [ $ATTEMPTS -gt 0 ]; do
              if curl -fsS "http://127.0.0.1:${TARGET_PORT}/health" >/dev/null 2>&1; then
                echo "Target healthy"; break
              fi
              sleep 2; ATTEMPTS=$((ATTEMPTS-1))
            done
            if [ $ATTEMPTS -eq 0 ]; then
              echo "Target not healthy"
              docker service logs --tail 200 "ai-logo-generator-$TARGET"_web || true
              exit 1
            fi

            # Přepni upstream (soubor vlastní deploy, sudo netřeba)
            printf 'reverse_proxy 127.0.0.1:%s\n' "${TARGET_PORT}" > /etc/caddy/includes/upstream.caddy
            # Reload Caddy (NOPASSWD povolený jednou v sudoers)
            sudo -n systemctl reload caddy
            echo "$TARGET" > "$ACTIVE_FILE"

            # Drain window
            sleep 30

            # Sundej starý stack
            docker stack rm "ai-logo-generator-$ACTIVE" || true

            # Bezpečný úklid
            USED=$(docker service ls -q | xargs -r docker service inspect --format "{{range .Spec.TaskTemplate.ContainerSpec.Secrets}}{{.SecretName}}{{\"\n\"}}{{end}}" | sort -u)
            for s in $(docker secret ls --format "{{.Name}}" | grep -E "_[0-9a-f]{12}$" || true); do
              echo "$USED" | grep -qx "$s" || docker secret rm "$s" || true
            done
            docker image prune -af
