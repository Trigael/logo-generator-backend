// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_TRANSACTION_URL")
}

// ENUMS
enum Pic_states {
  TEMP 
  ACTIVE
}

enum Currencies {
  CZK
  EUR
}

enum Payment_states {
  CREATED
  UNPAID
  COMPLETED
  FAILED
}

enum Transformation_types {
  UPSCALED
}

enum File_types {
  SVG
  PNG
  ZIP
  JPG
}

enum Order_states {
  CREATED
  FAILED
  COMPLETED
}

enum Logo_resolutions {
  RES_1024x1024   @map("1024x1024")
}

enum Email_states {
  SENT
  RECEIVED
}

// MODELS
model Users {
  id_user   Int   @id @default(autoincrement())

  // Data
  email   String

  //
  created_at DateTime     @default(now())  
  updated_at DateTime     @updatedAt
  deteled_at DateTime?
  deleted   Boolean     @default(false) 
  metadata    Json?

  // FKs
  Payments Payments[]
  Sessions Sessions[]

  Orders Orders[]
}

model Payments {
  id_payment  Int   @id @default(autoincrement())

  // Data
  order_id    Int
  user_id     Int
  stripe_id   String            @default("")
  state       Payment_states    @default(CREATED)

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  // FK Relations
  order   Orders    @relation(fields: [order_id], references: [id_order])
  user    Users     @relation(fields: [user_id], references: [id_user])
}

model Product_types {
  id_product_type  Int   @id @default(autoincrement())

  // Data
  name    String    @unique

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  Prices Prices[]
  Order_items Order_items[]
  // FK Relations

}

model Prices {
  id_prices  Int   @id @default(autoincrement())

  // Data
  product_type_id   Int
  amount_cents      Int
  currency          Currencies    @default(EUR)
  valid_from        DateTime      @default(now())
  valid_to          DateTime?

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  // FK Relations
  product_type    Product_types   @relation(fields: [product_type_id], references: [id_product_type])
}

model Sessions {
  id_session    String   @id @default(uuid())

  // Data
  ip_address    String
  user_agent    String
  browser       String
  user_id       Int?

  //
  created_at  DateTime     @default(now())  
  updated_at  DateTime     @updatedAt
  deteled_at  DateTime?
  deleted     Boolean     @default(false)
  metadata    Json? 

  // FKs
  // FK Relations
  user  Users?   @relation(fields: [user_id], references: [id_user])
}

model Prompts {
  id_prompt    Int   @id @default(autoincrement())

  // Data
  ai_model            String              @default("dall-e-3")
  brand_name          String
  slogan              String?
  industry            String?
  brand_colors        String[]
  logo_styles         String[]
  similiar_styles     String?
  additional_details  String?
  things_to_exclude   String?
  amount_to_generate  Int                 @default(1)
  logo_resolution     Logo_resolutions    @default(RES_1024x1024)
  whole_prompt        String

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  Prompted_logos Prompted_logos[]

  // FK Relations
}

model Prompted_logos {
  id_prompted_logo  Int   @id @default(autoincrement())

  // Data
  prompt_id           Int
  url_to_logo         String
  url_valid_to        DateTime
  filepath_to_logo    String?
  watermark_filepath  String?
  bought              Boolean   @default(false)

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  // FK Relations
  prompt  Prompts   @relation(fields: [prompt_id], references: [id_prompt])

  Archived_logos Archived_logos[]

  Transformed_logos Transformed_logos[]
}

model Archived_logos {
  id_archived_logo  Int   @id @default(autoincrement())

  // Data
  prompted_logo_id    Int
  filepath            String?

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  Transformed_logos Transformed_logos[]
  Order_items Order_items[]

  // FK Relations
  prompted_logo   Prompted_logos    @relation(fields: [prompted_logo_id], references: [id_prompted_logo])
}

model Transformed_logos {
  id_transformed_logo  Int   @id @default(autoincrement())

  // Data
  prompted_logo_id    Int
  archived_logo_id    Int
  transformation_type   Transformation_types
  filepath              String?
  file_type             File_types

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  // FK Relations
  prompted_logo   Prompted_logos    @relation(fields: [prompted_logo_id], references: [id_prompted_logo])
  archived_logo   Archived_logos    @relation(fields: [archived_logo_id], references: [id_archived_logo])
}

model Orders {
  id_order  Int   @id @default(autoincrement())

  // Data
  user_id               Int
  state                 Order_states    @default(CREATED)
  currency              Currencies      @default(EUR)
  total_amount_cents    Int
  completed_at          DateTime?

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  Order_items Order_items[]
  Payments Payments[]
  Mails Mails[]

  // FK Relations
  user    Users   @relation(fields: [user_id], references: [id_user])

}

model Order_items {
  // Every table in Prisma needs ID
  id_order_item  Int   @id @default(autoincrement())

  // Data
  order_id            Int
  archived_logo_id    Int?
  product_type_id     Int
  currency            Currencies    @default(EUR)
  amount_cents        Int           

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  // FK Relations
  order           Orders            @relation(fields: [order_id], references: [id_order])
  archived_logo   Archived_logos?    @relation(fields: [archived_logo_id], references: [id_archived_logo])
  product_type    Product_types     @relation(fields: [product_type_id], references: [id_product_type])
}

model Mails {
  // COMPOSITE PRIMARY KEY
  id_mails  Int   @id @default(autoincrement())

  // Data 
  order_id      Int?
  mailjet_id    String?
  to            String
  subject       String
  template_id   Int
  variables     Json
  state         Email_states    @default(SENT)

  //
  created_at    DateTime     @default(now())  
  updated_at    DateTime     @updatedAt
  deteled_at    DateTime?
  deleted       Boolean     @default(false)
  metadata      Json? 

  // FKs
  // FK Relations
  order   Orders?    @relation(fields: [order_id], references: [id_order])
}